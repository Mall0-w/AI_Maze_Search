CSC D84 - Artificial Intelligence, Unit 1 - Search

________________________________________________

Student Name 1 (last, first): Lewis, Kyle

Student Name 2 (last, first):

Student number 1: 1006113215

Student number 2:

UTORid 1: Lewisky2

UTORid 2:

READ THIS AND SIGN YOUR NAME AT THE END:

 I certify that I have read the UTSC code on academic
honesty and plaguarism. All work submitted as part
of this assignment is my own.

	Signed: _Kyle Lewis__	_(student 2 name here)__


(-2.5 marks for failing to provide the identifying
 information requested above)
________________________________________________

Answer the following questions. Be concise and clear
but explain carefully when needed.

1 .- (1 marks) Of BFS and DFS, which search algorithm yields the best results? (i.e. which is more likely
     to get the mouse to the cheese safely before being eaten?)

     BFS; it gets the mouse to the cheese in the fewest steps, meaning it minimizes the chances of it crossing paths with the Mouse


2 .- (1 marks) Does this mean that in general BFS is a better search algorithm? (yes/no and give reasons to
     support your answer based on your observations)

     No it depends entirely on context, BFS will always find the shortest path but in terms of performance it can vary.
     BFS will work better in terms of search time if the solutions aren't very far from the start (less of a queue developed and less paths to analyze)
     whereas BFS will work better in terms of search time if the solutions are far from the start (it goes as far as it can first)
     worst case however, they both preform the same.


3 .- (2 marks) Describe the heuristic function you used for A* search. Why is this heuristic admissible?

     Our hueristic function is simple to go by the manhattan distance between the mouse and the closest cheese.
     This is admissible because manhattan distance is the amount of nodes that would be travelled if there was a direct
     path between the mouse and the cheese, therefore it will always be less than or equal to the true cost of the path.

4 .- (1 marks) Explain how your heuristic function accounts for the presence of multiple cheese.
     
     Our hueristic function accounts for multiple cheeses by only considering the one closest to the mouse and ignoring all others.

5 .- (1 marks) Is A* equivalent to BFS for this problem? or is it better/worse? explain your answer based on 
     your observations.

     It depends on what you mean by better.  In terms of pathfinding; they both find the shortest path (so long as the heuristic is admissible),
     but A* is much faster on average than BFS since it typically has to search through less nodes.

6 .- (2 marks) Describe your heuristic function for A*-nokitty. How does it work? what factors are considered
     into the cost function? is it admissible (yes/no and why)?

     Our heuristic function iterates over each cheese and for each cheese it iterates over each cat
     it then takes the minimum value of sum_over_cats((manhattan dist from new pos to cheese) / (manhattan dist from cat to cheese))
     this is meant to locate the best possible cheese and we treat it as the distance from the new position to the cheese.
     We then take that distance and for each cat sum (min_dist) / (dist from new pos to cat)^2, using the inverse square law to dissaude
     the mouse from getting near the cats.  Finally, we preform a bfs on the new pos, going until it finds some square where there are at most
     2 walls.  We multiple the height of our bfs search tree (squaring it if we hit a sqaure with 3 walls at any point) by our sum to
     discourgae the mouse from searching tunnels or dead ends. This gives us our final heuristic.

     This heuristic is in no way admissible, the heuristic can return a result like 4*num_cats*distance_to_cheese, which if there were
     a straight shot from the mouse to the cheese, would be mean the heursitic is higher than the actual cost of travel.

7 .- (2 marks) What is the largest limitation of the search algorithms implemented in this assignment?
     (i.e. is there anything we are missing that could lead to a smarter mouse?) - this is
     a more or less open question, but we talked about it in lecture!

     Data is more or less the largest limitation.  For example, if we could get the entire planned paths of each cat
     or a small sample of them that could help our mice exponentially in terms of avoiding cats. However, if we were to start
     considering paths like that, it would make our programs much more complex as they will begin to handle insane numbers of parameters.
_____________________________________________________

Mark with an 'x' where appropriate. If something is only working partially, briefly describe what works, what
doesn't work, or what problems exist.
	
		Complete/Working	Partial		Not done

DFS            x

BFS            x                  

A*             X 

H              X

H_no_cats      X

_____________________________________________________

Marking:

(2.5 marks) Working implementation of BFS

(2.5 marks) Working implementation of DFS

(5 marks)  A* heuristic function is implemented, reasonable,
           and admissible.

(2.5 marks) Working implementation of A* (using your heuristic)

(5 marks) Implemented a **clever**  A*-nokitty heuristic
          and a working A*-nokitty search. The search
          should produce a smarter mouse than all of
          BFS/DFS/A*.

          The heuristic should account for known game 
          factors that affect the mouse's chance of success.

(10 marks) Answers in this report file

(up to 10 marks) Assigned by the TA based on how smart your
		 mouse actually is in the no-kitty mode. 
         Mind what is going on in
		 the game, and think about how to make your
		 mouse most likely to win!

Total for A1:       / out of 37.5


